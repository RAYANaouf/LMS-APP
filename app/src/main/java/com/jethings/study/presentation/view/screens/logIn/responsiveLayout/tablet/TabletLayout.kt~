package com.jetapptech.business.presentation.view.screens.logIn.responsiveLayout.tablet

import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.heightIn
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.Icon
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Text
import androidx.compose.material3.TextFieldDefaults
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.jetapptech.business.R
import com.jetapptech.business.presentation.nvgraph.AppScreen
import com.jetapptech.business.presentation.nvgraph.homeScreen
import com.jetapptech.business.presentation.nvgraph.signUpScreen
import com.jetapptech.business.presentation.ui.theme.background_color_0
import com.jetapptech.business.presentation.ui.theme.customBlack8
import com.jetapptech.business.presentation.ui.theme.customWhite0
import com.jetapptech.business.presentation.ui.theme.p_color1
import com.jetapptech.business.presentation.ui.theme.p_color2
import com.jetapptech.business.presentation.view.material.AlphaButton
import com.jetapptech.business.presentation.view.screens.logIn.LogInScreen
import com.jetapptech.business.util.TextStyles


@Composable
fun TabletLayout(
    gmail : String,
    onGmailChange : (String)->Unit = {},
    password : String,
    onPasswordChange : (String)->Unit = {},
    onNavigate : (AppScreen)->Unit = {},
    modifier: Modifier = Modifier
) {


    Row(
        modifier = modifier
            .fillMaxSize()
            .background(background_color_0)
    ) {
        Column(
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center,
            modifier = Modifier
                .weight(1f)
                .fillMaxHeight()
                .verticalScroll(rememberScrollState())
        ) {

            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                modifier = Modifier
            ) {

                Image(
                    painter = painterResource(id = R.drawable.app_store_logo_none_background),
                    contentDescription = null,
                    contentScale = ContentScale.FillBounds,
                    modifier = Modifier
                        .size(120.dp)
                )
                Spacer(modifier = Modifier.height(6.dp))
                Text(
                    text = buildAnnotatedString {
                        withStyle(
                            style = SpanStyle(
                                color = p_color1,
                                fontSize = 55.sp,
                                fontWeight = FontWeight.ExtraBold
                            )
                        ){
                            append("J ")
                        }
                        withStyle(
                            style = SpanStyle(
                                color = p_color2,
                                fontSize = 40.sp,
                                fontWeight = FontWeight.Bold
                            )
                        ){
                            append("Store")
                        }
                    }
                )
            }

        }

        Column(
            modifier = Modifier
                .fillMaxHeight()
                .verticalScroll(rememberScrollState())
                .weight(1f)
        ) {

            Column(
                verticalArrangement = Arrangement.Center,
                modifier = Modifier
                    .padding(start = 22.dp, end = 22.dp)
                    .weight(1f)
            ) {


                OutlinedTextField(
                    value         = gmail,
                    onValueChange = {
                        onGmailChange(it)
                    },
                    textStyle     = TextStyles.Monospace_TextStyles.TextStyleSZ9.copy(color = p_color1),
                    label         = {
                        Text(
                            text = "Email",
                            style = TextStyles.Monospace_TextStyles.TextStyleSZ8.copy(color = customBlack8),
                        )
                    },
                    leadingIcon = {
                        Icon(painter = painterResource(id = R.drawable.mail), contentDescription = null , tint = p_color1 , modifier = Modifier.size(26.dp))
                    },
                    shape = RoundedCornerShape(12.dp),
                    colors = TextFieldDefaults.colors().copy(focusedContainerColor = customWhite0 , unfocusedContainerColor = customWhite0 , focusedLabelColor = p_color1 , focusedIndicatorColor = p_color1 , cursorColor = p_color1 ),
                    modifier       = Modifier
                        .heightIn(min = 45.dp)
                        .fillMaxWidth()
                )


                Spacer(modifier = Modifier.height(16.dp))


                OutlinedTextField(
                    value         = password,
                    onValueChange = {
                        onPasswordChange(it)
                    },
                    textStyle     = TextStyles.Monospace_TextStyles.TextStyleSZ9.copy(color = p_color1),
                    label         = {
                        Text(
                            text = "Password",
                            style = TextStyles.Monospace_TextStyles.TextStyleSZ8.copy(color = customBlack8),
                        )
                    },
                    leadingIcon = {
                        Icon(painter = painterResource(id = R.drawable.password), contentDescription = null , tint = p_color1 , modifier = Modifier.size(26.dp))
                    },
                    shape = RoundedCornerShape(12.dp),
                    colors = TextFieldDefaults.colors().copy(focusedContainerColor = customWhite0 , unfocusedContainerColor = customWhite0 , focusedLabelColor = p_color1 , focusedIndicatorColor = p_color1 , cursorColor = p_color1 ),
                    modifier       = Modifier
                        .heightIn(min = 45.dp)
                        .fillMaxWidth()
                )

                Spacer(modifier = Modifier.height(6.dp))

                Box(
                    contentAlignment = Alignment.CenterStart,
                    modifier = Modifier
                        .clickable {

                        }
                        .padding(top = 5.dp , end = 5.dp)
                ) {
                    Text(
                        text = "Forgot the password",
                        style = TextStyles.Monospace_TextStyles.TextStyleSZ10.copy(color = p_color1)
                    )
                }

                Spacer(modifier = Modifier.height(40.dp))

                AlphaButton(
                    "Log In",
                    backgroundColor = p_color1,
                    onClick = {
                        onNavigate(homeScreen)
                    },
                    modifier = Modifier
                        .fillMaxWidth()
                        .height(55.dp)
                )


                Spacer(modifier = Modifier.height(20.dp))

                Box(
                    contentAlignment = Alignment.Center,
                    modifier = Modifier
                        .height(55.dp)
                        .fillMaxWidth()
                        .clip(RoundedCornerShape(12.dp))
                        .clickable {
                            onNavigate(signUpScreen)
                        }
                ) {
                    Text(
                        text = "Sign Up",
                        style = TextStyles.Monospace_TextStyles.TextStyleSZ8.copy(color = p_color1)
                    )
                }



            }

            Box(
                contentAlignment = Alignment.BottomCenter,
                modifier = Modifier
                    .fillMaxWidth()
            ) {
                Text(
                    text = "Powered by Jethings",
                    style = TextStyles.Monospace_TextStyles.TextStyleSZ8.copy(color = p_color1),
                    modifier = Modifier
                        .padding(bottom = 20.dp)
                )
            }

        }


    }

}

@Preview(
    name = "Tab 10",
    device = "spec:width=800dp,height=1280dp",
    showSystemUi = true
)
@Composable
private fun LogInScreen_preview3() {
    LogInScreen()
}
@Preview(
    name = "Nexus_9",
    device = "spec:width=768dp,height=1024dp",
    showSystemUi = true
)
@Composable
private fun LogInScreen_preview5() {
    LogInScreen()
}

@Preview(
    name = "Landscape Tab 10",
    device = "spec:width=1280dp,height=800dp",
    showSystemUi = true
)
@Composable
private fun LogInScreen_preview4() {
    LogInScreen()
}

@Preview(
    name = "Landscape Nexus_9",
    device = "spec:width=1024dp,height=768dp",
    showSystemUi = true
)
@Composable
private fun LogInScreen_preview6() {
    LogInScreen()
}


